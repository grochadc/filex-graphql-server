generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("HEROKU_POSTGRESQL_TEAL_URL")
}

model Student {
  id                  Int                   @id(map: "student_pkey1") @default(autoincrement())
  applicantId         Int                   @map("applicant_id")
  applicant           Applicant             @relation(fields: [applicantId], references: [id])
  ciclo_actual        String                @db.VarChar(255)
  codigo              String                @db.VarChar(255)
  nivel               Int
  curso               String                @db.VarChar(255)
  situacion           String?               @db.VarChar(255)
  groupId             Int?                  @map("group_id")
  groupObject         Group?                @relation(fields: [groupId], references: [id])
  desertor            Boolean?
  WorkshopReservation WorkshopReservation[]

  @@map("student")
}

model TestResults {
  id                 Int      @id @default(autoincrement())
  codigo             String   @db.VarChar(255)
  nombre             String   @db.VarChar(255)
  apellidoPaterno    String   @map("apellido_paterno") @db.VarChar(255)
  apellidoMaterno    String   @map("apellido_materno") @db.VarChar(255)
  genero             String   @db.VarChar(255)
  ciclo              String   @db.VarChar(255)
  carrera            String   @db.VarChar(255)
  telefono           String   @db.VarChar(255)
  email              String   @db.VarChar(255)
  institucionalEmail String?  @map("institucionalemail") @db.VarChar(255)
  nivelEscrito       Int      @map("nivel_escrito")
  curso              String   @db.VarChar(255)
  externo            Boolean?
  reubicacion        Boolean?
  generated_id       String?  @db.VarChar(255)
  meetLink           String?  @map("meetlink") @db.VarChar(255)
  nivelOral          Int?     @map("nivel_oral")
  nivelFinal         Int?     @map("nivel_final")

  @@map("test_results")
}

model Teacher {
  id      Int              @id @default(autoincrement())
  nombre  String           @db.VarChar(255)
  groups  Group[]
  options WorkshopOption[]

  @@map("teacher")
}

model Applicant {
  id                  Int       @id @default(autoincrement())
  codigo              String?   @db.VarChar(255)
  nombre              String?   @db.VarChar(255)
  apellido_paterno    String?   @db.VarChar(255)
  apellido_materno    String?   @db.VarChar(255)
  genero              String?   @db.VarChar(255)
  carrera             String?   @db.VarChar(255)
  ciclo_ingreso       String?   @db.VarChar(255)
  telefono            String?   @db.VarChar(255)
  email               String?   @db.VarChar(255)
  institutional_email String?   @db.VarChar(255)
  externo             Boolean?
  student             Student[]

  @@map("applicant")
}

model Group {
  ciclo       String    @db.VarChar(255)
  name        String    @db.VarChar(255)
  time        String    @db.VarChar(255)
  aula        String    @db.VarChar(255)
  teacherId   Int       @map("teacher_id")
  teacher     Teacher   @relation(fields: [teacherId], references: [id])
  id          Int       @id @default(autoincrement())
  nivel       Int
  registrados Int       @default(0)
  course      String?   @db.VarChar(255)
  student     Student[]

  @@map("group_table")
}

model student_ciclo {
  id               Int     @id(map: "student_pkey") @default(autoincrement())
  codigo           String
  nombre           String
  apellido_paterno String
  apellido_materno String
  genero           String
  carrera          String
  ciclo_ingreso    String?
  telefono         String
  email            String
  nivel            String
  curso            String
  externo          Boolean
  grupo            String
}

model student_old {
  id           Int     @id(map: "course_pkey") @default(autoincrement())
  codigo       String  @db.VarChar(255)
  nivel        String? @db.VarChar(255)
  curso        String? @db.VarChar(255)
  grupo        String? @db.VarChar(255)
  ciclo_actual String? @db.VarChar(255)
  applicant_id Int?
  situacion    String? @db.VarChar(255)
}

model WorkshopOption {
  id                  Int                   @id @default(autoincrement())
  active              Boolean
  day                 String?               @db.VarChar(255)
  time                String?               @db.VarChar(255)
  teacher_id          Int
  teacher             Teacher               @relation(fields: [teacher_id], references: [id])
  workshop_id         Int
  workshop            Workshop              @relation(fields: [workshop_id], references: [id])
  url                 String?               @db.VarChar(255)
  place               String?               @db.VarChar(255)
  workshopReservation WorkshopReservation[]

  @@map("workshop_option_info")
}

model WorkshopReservation {
  id          Int            @id @default(autoincrement())
  create_time DateTime       @default(dbgenerated("CURRENT_DATE")) @db.Date
  student_id  Int
  student     Student        @relation(fields: [student_id], references: [id])
  option_id   Int
  option      WorkshopOption @relation(fields: [option_id], references: [id])
  attended    Boolean?

  @@map("workshop_reservation")
}

model Workshop {
  id          Int              @id @default(autoincrement())
  name        String           @db.VarChar(255)
  description String           @db.VarChar(255)
  levels      Int[]
  options     WorkshopOption[]

  @@map("workshop")
}
